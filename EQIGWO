def jfs2(xtrain, ytrain, opts, X):
    h=0
    ub = 1
    lb = 0
    N = 5
    max_iter = 30
    pbest = copy.deepcopy(X)
    dim = np.size(xtrain, 1)
    if np.size(lb) == 1:
        ub = ub * np.ones([1, dim], dtype='float')
        lb = lb * np.ones([1, dim], dtype='float')
    Xbin = binary_conversion4(X, thres, N, dim)
    fit = np.zeros([N, 1], dtype='float')
    Xalpha = np.zeros([1, dim], dtype='float')
    Xbeta = np.zeros([1, dim], dtype='float')
    Xdelta = np.zeros([1, dim], dtype='float')
    Falpha = float('inf')
    Fbeta = float('inf')
    Fdelta = float('inf')
    for i in range(N):
        fit[i, 0] = Fun(xtrain, ytrain, Xbin[i, :], opts)
        if fit[i, 0] < Falpha:
            Xalpha[0, :] = X[i, :]
            Falpha = fit[i, 0]

        if fit[i, 0] < Fbeta and fit[i, 0] > Falpha:
            Xbeta[0, :] = X[i, :]
            Fbeta = fit[i, 0]

        if fit[i, 0] < Fdelta and fit[i, 0] > Fbeta and fit[i, 0] > Falpha:
            Xdelta[0, :] = X[i, :]
            Fdelta = fit[i, 0]
    fit_pre = copy.deepcopy(fit)
    curve = np.zeros([1, max_iter], dtype='float')
    t = 0
    curve[0,t] = Falpha.copy()
    t += 1
    k = random.random()
    while t < max_iter:
        k = 4*k*(1-k)
        if t<15:
            a = 2 -  2* (t / max_iter)*k
        else:
            a = 2 - 2 * (t / max_iter)
        for i in range(N):
            for d in range(dim):
                C1 = 2 * rand()
                C2 = 2 * rand()
                C3 = 2 * rand()
                C4 = 2 * rand()
                C5 = 2 * rand()
                C6 = 2 * rand()
                Dalpha = abs(C1 * (Xalpha[0, d]+pbest[i,d])/2 - X[i, d] +C4 * (Xalpha[0, d]-pbest[i,d])/2 - X[i, d])
                Dbeta = abs(C2 * (Xbeta[0, d]+pbest[i,d])/2 - X[i, d] +C5 * (Xbeta[0, d]-pbest[i,d])/2 - X[i, d])
                Ddelta = abs(C3 * (Xdelta[0, d]+pbest[i,d])/2 - X[i, d]+C6 * (Xdelta[0, d]-pbest[i,d])/2 - X[i, d])
                A1 = 2 * a * rand() - a
                A2 = 2 * a * rand() - a
                A3 = 2 * a * rand() - a
                X1 = Xalpha[0, d] - A1 * Dalpha
                X2 = Xbeta[0, d] - A2 * Dbeta
                X3 =  Xdelta[0, d] - A3 * Ddelta
                X[i, d] = (X1 + X2 + X3) / 3
          Xbin = binary_conversion(X, thres, N, dim)
          for i in range(N):
              fit[i, 0] = Fun(xtrain, ytrain, Xbin[i, :])
              if fit[i, 0] < fit_pre[i, 0]:
                  fit_pre[i, 0] = fit[i, 0]
                  pbest[i] = X[i]
              if fit[i, 0] < Falpha:
                  Xalpha[0, :] = X[i, :]
                  Falpha = fit[i, 0]
                  h = i
              if fit[i, 0] < Fbeta and fit[i, 0] > Falpha:
                  Xbeta[0, :] = X[i, :]
                  Fbeta = fit[i, 0]
                  p = i
              if fit[i, 0] < Fdelta and fit[i, 0] > Fbeta and fit[i, 0] > Falpha:
                  Xdelta[0, :] = X[i, :]
                  Fdelta = fit[i, 0]
                  u = i
          k = random.randint(0, N-1)
          m = random.randint(0, N-1)
          while (k == m or k == h or m == h):
              k = random.randint(0, N-1)
              m = random.randint(0, N-1)
          Xk = numpy.zeros(dim)
          Xm = numpy.zeros(dim)
          for i in range(dim):
              Xk[i] = random.random()
              Xm[i] = random.random()
          bxk = binary_conversion2(np.expand_dims(Xk,axis=0), thres, N, dim)
          bxm = binary_conversion2(np.expand_dims(Xm,axis=0), thres, N, dim)
          fk = Fun(xtrain, ytrain,bxk, opts)
          fm = Fun(xtrain, ytrain, bxm, opts)
          Xalpha2 = np.expand_dims(two(X[k], X[m], X[h], dim, fk, fm, fit[h, 0]), axis=0)
          bin = binary_conversion2(Xalpha2, thres, N, dim)
          fit2 = Fun(xtrain, ytrain, bin, opts)
          if fit2< Falpha:
              N = N+1
              X = np.insert(X,0,Xalpha2,axis=0)
              # np.insert(X,0,np.squeeze(Xalpha2),axis=0)
              # np.insert(pbest,0,np.squeeze(Xalpha2),axis=0)
              pbest = np.insert(pbest,0,Xalpha2,axis=0)
              fit = np.insert(fit,0,fit2,axis=0)
              fit_pre = np.insert(fit_pre,0,fit2,axis=0)
              Xalpha = Xalpha2
              Falpha = fit2
          else:
              if np.exp(Falpha-fit2)/2 > random.random():
                  N = N + 1
                  z = np.squeeze(Xalpha2)
                  X = np.insert(X, 0, Xalpha2, axis=0)
                  pbest = np.insert(pbest, 0, Xalpha2, axis=0)
                  fit = np.insert(fit, 0, fit2, axis=0)
                  fit_pre = np.insert(fit_pre, 0, fit2, axis=0)
          curve[0, t] = Falpha.copy()
          t += 1
          Gbin = binary_conversion(Xalpha, thres, 1, dim)
          Gbin = Gbin.reshape(dim)
          pos = np.asarray(range(0, dim))
          sel_index = pos[Gbin == 1]
          return sel_index
